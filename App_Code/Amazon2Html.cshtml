@using System.Text.RegularExpressions
@using System.Xml.Linq
@using System.Text

@functions
{
    private const string AWS_SERVICE = "AWSECommerceService";
    private const string AWS_VERSION = "2010-11-01";
    
    public static string AccessKeyId;
    public static string SecretKey;
    public static string Destination = "ecs.amazonaws.jp";
    public static string AssosiateTag = "bestylesnet-22";
    public static string StyleSheetUrl = "/Styles/Amazon2Html.css";

    private static string GetItemIdFromUrl(string url)
    {
        try
        {
            url = StringSupport.ExpandUrl(url);

            return new Regex(@"\/(?<id>[A-z0-9]{10})")
                .Matches(url)[0].Groups["id"].Value;
        }
        catch
        {
            throw new Exception("不正なURLです。ASINが取得できませんでした。");
        }
    }

    private static string BuildRequestUrl(string item_id)
    {
        var helper = new AmazonProductAdvtApi.SignedRequestHelper(
            AccessKeyId, SecretKey, Destination);

        var param = new Dictionary<string, String>();
        param["Service"] = AWS_SERVICE;
        param["Version"] = AWS_VERSION;
        param["Operation"] = "ItemLookup";
        param["ItemId"] = item_id;
        param["ResponseGroup"] = "Medium";
        param["AssociateTag"] = AssosiateTag;

        return helper.Sign(param);
    }

    public static string DownloadItemData(string url)
    {
        var item_id = GetItemIdFromUrl(url);
        var uri = BuildRequestUrl(item_id);

        return new WebClient() {
            Encoding = Encoding.GetEncoding("utf-8"),
        }.DownloadString(uri);
    }

    private static dynamic ParseItemData(string data)
    {
        var x = XDocument.Parse(data);

        XNamespace ns = string.Format(
            @"http://webservices.amazon.com/{0}/{1}",
            AWS_SERVICE, AWS_VERSION);

        foreach (var error in x.Descendants(ns + "Error"))
        {
            throw new Exception(string.Format("{0}: {1}",
                error.Element(ns + "Code").Value,
                error.Element(ns + "Message").Value));
            break;
        }

        var q = from e in x.Descendants(ns + "Item")
                select new 
        {
            Asin     = e.Element(ns + "ASIN"),
            Url      = e.Element(ns + "DetailPageURL"),
            ImageUrl = e.Element(ns + "MediumImage").Element(ns + "URL"),

            Binding         = e.Element(ns + "ItemAttributes").Element(ns + "Binding"),
            Brand           = e.Element(ns + "ItemAttributes").Element(ns + "Brand"),
            Manufacturer    = e.Element(ns + "ItemAttributes").Element(ns + "Manufacturer"),
            Title           = e.Element(ns + "ItemAttributes").Element(ns + "Title"),
            Author          = e.Element(ns + "ItemAttributes").Element(ns + "Author"),
            PublicationDate = e.Element(ns + "ItemAttributes").Element(ns + "PublicationDate"),
            ReleaseDate     = e.Element(ns + "ItemAttributes").Element(ns + "ReleaseDate"),
            ProductGroup    = e.Element(ns + "ItemAttributes").Element(ns + "ProductGroup"),
            Studio          = e.Element(ns + "ItemAttributes").Element(ns + "Studio"),
                    
            Price = e.Element(ns + "OfferSummary")
                        .Element(ns + "LowestNewPrice")
                        .Element(ns + "FormattedPrice"),
        };

        return q.First();
    }
}

@helper IncludeStyleSheet()
{
    <link href="@StyleSheetUrl" rel="stylesheet" type="text/css" />
}

@helper GetHtml(string url)
{   
    try
    {
        var response = DownloadItemData(url);
        var result = ParseItemData(response);

        var date = result.PublicationDate;
        if (date == null) { date = result.ReleaseDate; }

<div class="amazon-goods">
    @if (result.Asin != null)
    {
    <img class="amazon-goods-image" src="@result.ImageUrl.Value" />
    }
    <dl class="amazon-goods-detail">
    @if (result.Asin != null)
    {
        <dt>Title</dt>
        <dd><a href="@result.Url.Value">@result.Title.Value</a></dd>
    }
    @if (result.Studio != null)
    {
        <dt>Studio</dt>
        <dd>@result.Studio.Value @if (date != null) { <text>(@date.Value)</text> } </dd>
    }
    @if (result.Author != null)
    {
        <dt>Author</dt>
        <dd>@result.Author.Value</dd>
    }
    @if (result.Binding != null)
    {
        <dt>Binding</dt>
        <dd>@result.Binding.Value</dd>
    }
    @if (result.Price != null)
    {
        <dt>Price</dt>
        <dd>@result.Price.Value</dd>
    }
    </dl>
</div>

    }
    catch (Exception e)
    {

<div class="amazon-goods error">
    <p>@e.Message;</p>
</div>

    }
}